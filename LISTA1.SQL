-- CRIAÇÃO DO BANCO DE DADOS LOJA
CREATE DATABASE LOJA
    ON (NAME = LOJA_DAT,
        FILENAME = '/Users/yurediniz/Banco_Dados/LOJA_DAT.mdf',
        SIZE = 5,
        MAXSIZE = 10,
        FILEGROWTH = 1
    )
    LOG
    ON (NAME = LOJA_LOG,
        FILENAME = '/Users/yurediniz/Banco_Dados/LOJA_LOG.ldf',
        SIZE = 10,
        MAXSIZE = 20,
        FILEGROWTH = 2
    )
GO

-- SELECIONA O BANDO DE DADOS LOJA PARA SER UTILIZADO
USE LOJA 
GO

-- CRIAÇÃO DA TABELA PAIS
CREATE TABLE PAIS (
    SIGLA CHAR(3) NOT NULL
        CONSTRAINT PK_PAIS PRIMARY KEY,
    NOME VARCHAR(15) NOT NULL
        CONSTRAINT UN_PAIS_NOME UNIQUE
)
GO

-- CRIAÇÃO DA TABELA CIDADE
CREATE TABLE CIDADE (
    CODIGO SMALLINT NOT NULL
        CONSTRAINT PK_CIDADE PRIMARY KEY,
    NOME VARCHAR(30) NOT NULL,
    UF CHAR(2) NOT NULL,
    PAIS CHAR(3) NOT NULL
        CONSTRAINT FK_CIDADE_PAIS FOREIGN KEY
        REFERENCES PAIS(SIGLA)
)
GO

-- CRIAÇÃO DA TABELA CLIENTE
CREATE TABLE CLIENTE (
    CODIGO CHAR(5) NOT NULL
        CONSTRAINT PK_CLIENTE PRIMARY KEY
        CONSTRAINT CK_CLIENTE_CODIGO CHECK(CODIGO LIKE '[A-Z][A-Z][A-Z][A-Z][A-Z]'),
    NOME VARCHAR(40) NOT NULL,
    TIPO CHAR(1) NOT NULL
        CONSTRAINT CK_CLIENTE_TIPO CHECK(TIPO LIKE '[FJ]'),
    CONTATO VARCHAR(30) NULL,
    CARGO VARCHAR(30) NULL,
    ENDERECO VARCHAR(50) NOT NULL,
    CIDADE SMALLINT NOT NULL
        CONSTRAINT FK_CLIENTE_CIDADE FOREIGN KEY
        REFERENCES CIDADE(CODIGO),
    CEP VARCHAR(10) NULL,
    FONE VARCHAR(16) NULL,
    FAX VARCHAR(16) NULL,
    OBS TEXT NULL
)
GO

-- CRIAÇÃO DA TABELA FUNCAO
CREATE TABLE FUNCAO (
    CODIGO TINYINT NOT NULL
        CONSTRAINT PK_FUNCAO PRIMARY KEY,
    NOME VARCHAR(30) NOT NULL
        CONSTRAINT UN_FUNCAO_NOME UNIQUE,
    GRATIFIC TINYINT NOT NULL
)
GO

-- CRIAÇÃO DA TABELA FUNCIONARIO
CREATE TABLE FUNCIONARIO (
    CODIGO TINYINT NOT NULL
        CONSTRAINT PK_FUNCIONARIO PRIMARY KEY
        CONSTRAINT CK_FUNCIONARIO_CODIGO CHECK(LEN(CODIGO) < 3),
    NOME VARCHAR(40) NOT NULL,
    SEXO CHAR(1) NOT NULL
        CONSTRAINT CK_FUNCIONARIO_SEXO CHECK(SEXO LIKE'[FM]'),
    ESTCIVIL CHAR(1) NOT NULL
        CONSTRAINT CK_FUNCIONARIO_ESTCIVIL CHECK(ESTCIVIL LIKE'[SCVDO]'),
    RG VARCHAR(15) NOT NULL
        CONSTRAINT UN_FUNCIONARIO_RG UNIQUE,
    CPF VARCHAR(12) NOT NULL
        CONSTRAINT UN_FUNCIONARIO_CPF UNIQUE,
    TRAT VARCHAR(4) NOT NULL
        CONSTRAINT CK_FUNCIONARIO_TRAT CHECK(TRAT IN ('Sr', 'Sra', 'Srta', 'Dr', 'Dra')),
    DATANASC SMALLDATETIME NOT NULL,
    NATURAL SMALLINT NOT NULL
        CONSTRAINT FK_FUNCIONARIO_CIDADE1 FOREIGN KEY
        REFERENCES CIDADE(CODIGO),
    DATAADM SMALLDATETIME NOT NULL,
    ENDERECO VARCHAR(40) NOT NULL,
    COMPL VARCHAR(20) NULL,
    BAIRRO VARCHAR(20) NULL,
    RESIDE SMALLINT NOT NULL
        CONSTRAINT FK_FUNCIONARIO_CIDADE2 FOREIGN KEY
        REFERENCES CIDADE(CODIGO),
    CEP VARCHAR(10) NULL,
    FONE VARCHAR(10) NULL,
    CELULAR VARCHAR(10) NULL,
    FUNCAO TINYINT NULL
        CONSTRAINT FK_FUNCIONARIO_FUNCAO FOREIGN KEY
        REFERENCES FUNCAO(CODIGO),
    SETOR CHAR(3) NOT NULL,
    SALARIO SMALLMONEY NOT NULL,
    EMAIL VARCHAR(40) NULL,
    OBS TEXT NULL
)
GO

-- CRIAÇÃO DA TABELA SETOR
CREATE TABLE SETOR (
    SIGLA CHAR(3) NOT NULL
        CONSTRAINT PK_SETOR PRIMARY KEY
        CONSTRAINT CK_SETOR_SIGLA CHECK(SIGLA LIKE '[A-Z][A-Z][A- Z]'),
    NOME VARCHAR(30) NOT NULL
        CONSTRAINT UN_SETOR_NOME UNIQUE,
    RAMAL CHAR(3) NULL
        CONSTRAINT CK_SETOR_RAMAL CHECK(LEN(RAMAL) < 4),
    SUPERIOR CHAR(3) NULL
        CONSTRAINT CK_SETOR_SUPERIOR CHECK(SUPERIOR LIKE '[A-Z][A- Z][A-Z]')
        CONSTRAINT FK_SETOR_SETOR FOREIGN KEY
        REFERENCES SETOR(SIGLA),
    CHEFE TINYINT NULL
        CONSTRAINT UN_SETOR_CHEFE UNIQUE
        CONSTRAINT FK_SETOR_CHEFE FOREIGN KEY
        REFERENCES FUNCIONARIO(CODIGO)
)
GO

-- ALTERANDO A TABELA FUNCIONARIO E ATUALIZANDO A COLUNA SETOR COMO CHAVE ESTRANGEIRA REFERENCIANDOA TABELA SETOR
ALTER TABLE FUNCIONARIO
    ADD CONSTRAINT FK_FUNCIONARIO_SETOR FOREIGN KEY(SETOR)
    REFERENCES SETOR(SIGLA)
GO

-- CRIAÇÃO DA TABELA TIPO
CREATE TABLE TIPO (
    CODIGO TINYINT NOT NULL
        CONSTRAINT PK_TIPO PRIMARY KEY
        CONSTRAINT CK_TIPO_CODIGO CHECK(LEN(CODIGO) < 3 ),
    NOME VARCHAR(15) NOT NULL
        CONSTRAINT UN_TIPO_NOME UNIQUE,
    DESCRICAO TEXT NULL
)
GO

-- CRIAÇÃO DA TABELA PRODUTO
CREATE TABLE PRODUTO (
    CODIGO SMALLINT NOT NULL
        CONSTRAINT PK_PRODUTO PRIMARY KEY,
    NOME VARCHAR(40) NOT NULL
        CONSTRAINT UN_PRODUTO_NOME UNIQUE,
    DESCRICAO VARCHAR(45) NOT NULL,
    APRESENT VARCHAR(30) NOT NULL,
    VENDA SMALLMONEY NOT NULL,
    CUSTO SMALLMONEY NOT NULL,
    QUANTEST SMALLINT NOT NULL,
    ESTMIN SMALLINT NULL,
    TIPO TINYINT NOT NULL
        CONSTRAINT FK_PRODUTO_TIPO FOREIGN KEY
        REFERENCES TIPO(CODIGO),
    SITUACAO CHAR(1) NULL
        CONSTRAINT CK_PRODUTO_SITUACAO CHECK(SITUACAO LIKE '[NDS]')
)
GO

-- CRIAÇÃO DA TABELA PEDIDO
CREATE TABLE PEDIDO (
    CODIGO SMALLINT NOT NULL
        CONSTRAINT PK_PEDIDO PRIMARY KEY
        CONSTRAINT CK_PEDIDO_CODIGO CHECK(LEN(CODIGO) < 6),
    CLIENTE CHAR(5) NOT NULL
        CONSTRAINT FK_PEDIDO_CLIENTE FOREIGN KEY
        REFERENCES CLIENTE(CODIGO),
    VENDEDOR TINYINT NOT NULL
        CONSTRAINT FK_PEDIDO_FUNCIONARIO FOREIGN KEY
        REFERENCES FUNCIONARIO(CODIGO),
    DATAPEDID SMALLDATETIME NOT NULL,
    DATAFATURA SMALLDATETIME NULL
)
GO

-- CRIAÇÃO DA TABELA ITENS
CREATE TABLE ITENS (
    PEDIDO SMALLINT NOT NULL
        CONSTRAINT FK_ITENS_PEDIDO FOREIGN KEY
        REFERENCES PEDIDO(CODIGO),
    PRODUTO SMALLINT NOT NULL
        CONSTRAINT FK_ITENS_PRODUTO FOREIGN KEY
        REFERENCES PRODUTO(CODIGO),
    PRIMARY KEY (PEDIDO, PRODUTO)
)
GO
